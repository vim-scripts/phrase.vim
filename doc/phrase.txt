*phrase.txt*	gather useful phrase, refer it whenever you want

>
        88888888b.  888                                          
        888    "88b 888                                          
        888     888 888                                          
        888    d88P 888888b.  888d888 8888b.  .d8888b   .d888b.  
        88888888P"  888  "88b 888P"      "88b 88K      d8P   Y8b 
        888         888   888 888    .d888888 "Y8888b. 888888888 
        888         888   888 888    888  888      X88 Y8b.      
        888         888   888 888    "Y888888  88888P'  "Y88888 
<

Version: 0.5
Author : t9md <taqumd@gmail.com>
GitHub: http://github.com/t9md/vim-phrase
==============================================================================
CONTENTS					*phrase-contents*

Introduction				|phrase-introduction|
Variables				|phrase-variables|
Commmands				|phrase-commands|
Keymap					|phrase-keymap|
Unite plugin				|phrase-unite|
Configuration Examples			|phrase-configuration|
Collaborate				|phrase-collaborate|
  Dropbox				|phrase-collaborate-dropbox|
  Github				|phrase-collaborate-github|
ToDo					|phrase-todo|
Bugs					|phrase-bugs|
Changelog				|phrase-changelog|

==============================================================================
Introduction						*phrase-introduction*

*phrase* is Vim plugin to help gathering useful phrase of several programming
languages.
You can refer it conveniently while you are programming.

Requirement:
- Vim 7.0 or later

==============================================================================
VARIABLES						 *phrase-variables*

g:phrase_author						*g:phrase_author*
	Your identifier of phrase. this variable is used to identify
	your phrase from several subdirectory under |g:phrase_basedir|.

	Default~
	  $USER

g:phrase_basedir					*g:phrase_basedir*
	Each phrase is created under `g:phrase_basedir/g:phrase_auther/`
	Default~
	  $HOME/.vim/phrase

g:phrase_ft_tbl						*g:phrase_ft_tbl*

	Dictionary used to customize or add new filetype

	Default~
	{}

	Each entry has following fields

	{ filetype: { "ext": FILE_EXTENSION, "cmt": [CMT_L, CMT_R] }

	* FILE_EXTENSION(required)
	* CMT_L(required)
	* CMT_R(optional)

EXAMPLE~
>
	let g:phrase_ft_tbl = {}
	let g:phrase_ft_tbl.lua = {
	      \ "ext": "lua",
	      \ "cmt": ["--"],
	      \ }
	let g:phrase_ft_tbl.c = {
	      \ "ext": "c",
	      \ "cmt": ["/*", "*/"],
	      \ }
<
b:phrase_ext						*g:phrase_ext*
	buffer local variable to indicate phrase's extension.
	this value is used if set.


Example~
>
	" Opscode's Chef is based on Ruby, but I want chef's phrase keep 
	" separated from Ruby's one.
	au BufNewFile,BufRead */*cookbooks/*  let b:phrase_ext = 'chef'
<

modeline~
phrase.vim support original modeline.
In example above. phrase.chef is the phrase's filename.
If you execute |:PhraseList| from buffer `phrase.chef`
phrase.vim try to find phrases from &filetype means, from file `phrase.rb`.
If you want continue to search phrase from `phrase.chef`.
You can set mode line begin with format `phrase: {ext}`.

Example modeline~
in phrase.chef
>
	# phrase: chef
	# vim: set ft=ruby:
<

Example for Rakefile~
.vimrc
>
	au BufNewFile,BufRead Rakefile let b:phrase_ext = 'rake'
<
in phrase.rake
>
	# phrase: rake
<
==============================================================================
COMMANDS						*phrase-commands*

:PhraseList						*:PhraseList*
	Show phrase-list
	<CR> to jump to actual phrase.

:PhraseEdit {ext}					 *:PhraseEdit*
	Edit phrase of specified extension.
	If {ext} is ommited. current |&filetype| 's default extension is used.

:[range]PhraseCreate					 *:PhraseCreate*
	Create new phrase from current |:range|.

==============================================================================
KEYMAP							*phrase-keymap*

n <Plug>(phrase-edit)
	Edit phrase.
n <Plug>(phrase-list)
	Show phrase-list.
v <Plug>(phrase-create)
	Create phrase from visually selected text.

==============================================================================
UNITE PLUGIN						 *phrase-unite*

|phrase.vim| provide |unite.vim| plugin.
I highly recommend you to install |unite.vim| to get full power of |phrase.vim|.

Try
>
	:Unite phrase
<
==============================================================================
CONFIGURATION EXAMPLE                               *phrase-configuration*
>
	let g:phrase_auther  = "t9md"

	nmap gl  <Plug>(phrase-list)
	nmap gp  <Plug>(phrase-edit)
	xmap gp  <Plug>(phrase-create)

	" If you use Unite plugin
	nnoremap <silent> <Space>p  :<C-u>Unite phrase -start-insert<CR>
<
==============================================================================
COLLABORATE						  *phrase-collaborate*
------------------------------------------------------------------------------
DROPBOX						  *phrase-collaborate-dropbox*

Shareing phrase folder with Dropbox is another practical use case.

If you dont't want to .swp files be synced every time your collaborator
view your phrase, disable making swap file in among all collaborators.
>
    au BufNewFile,BufRead */phrase/*/phrase.* setlocal noswapfile
<
------------------------------------------------------------------------------
GITHUB						  *phrase-collaborate-github*

Publish your phrases to github.
My proposal about this type of repository name is `phrase-{yourname}`.

Repository structure:~

	phrase-{yourname}/phrase/{yourname}/
	phrase-{yourname}/phrase/{yourname}/phrase.vim
	phrase-{yourname}/phrase/{yourname}/phrase.rb

Example repository:~
  https://github.com/t9md/phrase-t9md

	phrase-t9md/phrase/t9md
	phrase-t9md/phrase/t9md/phrase.vim
	phrase-t9md/phrase/t9md/phrase.rb

Unite phrase plugin gather phrases from directory named `phrase` in &rtp.
So if you manage you plugin with `pathogen` or Vundle, you can also manage
phrases as easily as other plugin.
For Vundle you can import t9md's phrase by setting following line in .vimrc
>
	Bundle: t9md/phrase-t9md
<
==============================================================================
BUGS							*phrase-bugs*

==============================================================================
CHANGELOG						*phrase-changelog*

2011-08-21: v0.5
	- update help
	- :PhraseList no longer accept argument(for simplicity).
	- :PhraseCreate no longer accept argument(for simplicity).
	- b:phrase_filetype is renamed as b:phrase_ext.
2011-08-04: v0.4
	- add sorter_phrase for unite.
2011-07-31: v0.3
	- introduce 'b:phrase_filetype' var.
2011-03-10: v0.2
	- Support multiple languages
	- Change configuration variables.
          g:phrase_dir is no longer used.
          Use g:phrase_auther and g:phrase_basedir
          Use g:phrase_ft_tbl to customise filetype extension map and comment
          string.
	- Eliminate comment string when creating PhraseList.
2011-03-06: v0.1
	- First release
==============================================================================
vim:tw=78:ts=8:ft=help:norl:
